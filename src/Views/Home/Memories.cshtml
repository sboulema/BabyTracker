@using BabyTracker.Extensions;
@using BabyTracker.Models.Database;

@model BabyTracker.Models.ViewModels.DiaryViewModel

@{
    ViewData["Title"] = "Memories - BabyTracker";
}

<div class="btn-group mb-3">
    <input type="radio" class="btn-check" name="viewStyle" id="viewStyleList" onchange="toggleViewStyle()" autocomplete="off" checked>
    <label class="btn btn-outline-primary" for="viewStyleList"><i class="fas fa-list"></i> List</label>

    <input type="radio" class="btn-check" name="viewStyle" id="viewStyleCard" onchange="toggleViewStyle()" autocomplete="off">
    <label class="btn btn-outline-primary" for="viewStyleCard"><i class="fas fa-image"></i> Card</label>
</div>

@foreach (var group in Model.Entries.GroupBy(entry => entry.Time.ToDateTimeUTC().Year))
{
    @if (group.Any() == false)
    {
        continue;
    }

    var yearsAgo = DateTime.UtcNow.Year - group.Key;
    <h1 class="bt-purple-title">
        @yearsAgo @(yearsAgo == 1 ? "year" : "years") ago
    </h1>

    <table id="diaryTable-@yearsAgo" class="table">
        <tbody>
            @foreach (var entry in group)
            {
                if (entry is Joy joy)
                {
                    @await Html.PartialAsync("Diary/_Joy", joy)
                }
                else if (entry is Milestone milestone)
                {
                    @await Html.PartialAsync("Diary/_Milestone", milestone)
                }
                else if (entry is Activity activity)
                {
                    @await Html.PartialAsync("Diary/_Activity", activity)
                }
            }
        </tbody>
    </table>

    <script>
        $(document).ready(function() {
            var filtersConfig = {
                col_0: 'none',
                col_1: 'checklist',
                col_2: 'none',
                col_3: 'none',
                col_4: 'none',
                toolbar: false,
                themes: [{
                    name: 'transparent'
                }],
                extensions: [{
                    name: 'colsVisibility',
                    at_start: [0, 1, 4]
                }]
            };

            var tf = new TableFilter('diaryTable-@yearsAgo', 0, filtersConfig);
            tf.init();
            tableFilters.push(tf);
        });
    </script>
}

@section Stylesheets
{
    <link rel="stylesheet" href="/css/tablefilter.css">
    <link rel="stylesheet" href="/css/colsVisibility.css">
    <link rel="stylesheet" href="/css/transparent.css">
}

@section Scripts
{
    <script src="/js/tablefilter.js"></script>
    <script src="/js/tf-1-2aa33b10e0e549020c12.js"></script>

    <script>
        var tableFilters = [];

        function toggleViewStyle() {
            tableFilters.forEach(tf => {
                var tfColsVisibility = tf.extension('colsVisibility');
                tfColsVisibility.toggleCol(2);
                tfColsVisibility.toggleCol(3);
                tfColsVisibility.toggleCol(4);
            })
        }

        function saveCard(selector) {
            $(".btn-screenshot").toggle();

            var scrollTop = document.documentElement.scrollTop;

            window.scrollTo(0, 0);

            html2canvas(document.querySelector("#" + selector)).then(canvas => {
                canvas.toBlob(function (blob) {
                    saveAs(blob, selector + ".png");
                });
            });

            window.scrollTo(0, scrollTop);

            $(".btn-screenshot").toggle();
        }
    </script>
}