@using System.Text.Json;

@model BabyTracker.Models.ViewModels.DiaryViewModel

@{
    ViewData["Title"] = "Diary - BabyTracker";
}

@await Html.PartialAsync("_Notification")

@if (Model == null)
{
    <div class="card col-6 offset-3">
        <div class="card-body">
            <h5 class="card-title">Please choose a date to view your entries</h5>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <div class="input-group mb-3" style="width: fit-content;">
                <a class="btn btn-outline-secondary @(string.IsNullOrEmpty(Model.DatePreviousUrl) ? "disabled" : string.Empty)" href="@Model.DatePreviousUrl"><i class="fas fa-angle-left"></i></a>
                <input type="text" id="datePickr" onchange="filterDate(event)" value="@Model?.Date.ToString("yyyy-MM-dd")" class="form-control">
                <a class="btn btn-outline-secondary @(string.IsNullOrEmpty(Model!.DateNextUrl) ? "disabled" : string.Empty)" href="@Model.DateNextUrl"><i class="fas fa-angle-right"></i></a>
            </div>
        </div>
        <div class="col">
            <div class="input-group mb-3 float-end" style="width: fit-content;">
                <input type="text" class="form-control" id="search-input" placeholder="Search">
                <button class="btn btn-outline-secondary" type="button" id="search-button"><i class="fas fa-search"></i></button>
            </div>
        </div>
    </div>

    @if (Model.Entries.Any()) 
    {
        <div class="btn-group-toggle mb-3" data-toggle="buttons">
            @foreach (var entryType in Model.EntryTypes)
            {
                <label class="btn btn-outline-info mb-2" title="@entryType">
                    <input type="checkbox" class="btn-check entryTypeCheckbox" data-entrytype="@entryType.ToLower()" onchange="filterType(event)" checked autocomplete="off">
                    <img src="~/img/icon_review_@(entryType.ToLower()).png" width="32" />
                </label>
            }
        </div>

        <ul class="nav nav-pills mb-3" id="pills-tab">
            <li class="nav-item">
                <button class="nav-link active" id="pills-list-tab" data-bs-toggle="pill" data-bs-target="#pills-list" type="button">
                    <i class="fas fa-list"></i> List</button>
            </li>
            <li class="nav-item">
                <button class="nav-link" id="pills-card-tab" data-bs-toggle="pill" data-bs-target="#pills-card" type="button">
                    <i class="fas fa-image"></i> Card</button>
            </li>
        </ul>
        <div class="tab-content fs-@Model.FontSize" id="pills-tabContent">
            <div class="tab-pane fade show active" id="pills-list">
                @foreach (var entry in Model.Entries.ToList())
                {
                    @await Html.PartialAsync("_DiaryEntryList", entry)
                }
            </div>
            <div class="tab-pane fade" id="pills-card">
                @foreach (var entry in Model.Entries.ToList())
                {
                    @await Html.PartialAsync("_DiaryEntryCard", entry)
                }
            </div>
        </div>
    }
    else 
    {
        <div class="card col-12 col-lg-6 offset-lg-3">
            <div class="card-body">
                <h5 class="card-title">No entries for this date</h5>
            </div>
        </div>
    }
}

@section Stylesheets
{
    <link rel="stylesheet" href="/css/flatpickr.min.css">
}

@section HeaderScripts
{
    <script src="/js/flatpickr.min.js"></script>
}

@section Scripts
{
    <script>
        var babyName = '@Html.Raw(Model!.BabyName)';

        var availableDates = @Html.Raw(JsonSerializer.Serialize(Model.AvailableDates));

        function filterDate(event) {
            window.location.href = "/" + babyName + "/" + event.target.value;
        }

        function saveCard(selector) {
            $(".btn-screenshot").toggle();

            var scrollTop = document.documentElement.scrollTop;

            window.scrollTo(0, 0);

            html2canvas(document.querySelector("#" + selector)).then(canvas => {
                canvas.toBlob(function (blob) {
                    saveAs(blob, selector + ".png");
                });
            });

            window.scrollTo(0, scrollTop);

            $(".btn-screenshot").toggle();
        }

        function filterType(event) {
            var filter = $(".entryTypeCheckbox")
                .filter(c => c.checked == true)
                .map(c => c.dataset.entrytype)

            $(`.card.${event.target.dataset.entrytype}`).toggle();

            if (event.target.checked == true) {
                $(event.target).parent().removeClass("active");
                event.target.nextElementSibling.style.filter = "none";
            } else {
                $(event.target).parent().addClass("active");
                event.target.nextElementSibling.style.filter = "brightness(0) invert(1)";
            }

            localStorage.setItem("entryTypeFilter", JSON.stringify(filter));
        }

        $(document).ready(function () {
            $("#datePickr").flatpickr({
                enable: availableDates,
                defaultDate: $("#datePickr").text(),
                allowInput: true
            });

            document
                .getElementById("search-button")
                .addEventListener("click", function()
                {
                    const url = new URL(window.location.href);
                    url.searchParams.set("q", document.getElementById('search-input').value);
                    window.location.href = url.href;
                });

            document
                .getElementById("search-input")
                .addEventListener("keypress", function (event) {
                    if (event.key === "Enter") {
                        event.preventDefault();
                        document.getElementById("search-button").click();
                    }
                });

            // Restore previously selected type filters
            var filter = JSON.parse(localStorage.getItem("entryTypeFilter"));
            if (filter.length > 0) {
                $(".entryTypeCheckbox")
                    .each(function() {
                        if (!filter.includes($(this).data("entrytype"))) {
                            setTimeout(function() { element.click(); document.activeElement.blur(); }, 300);
                        }
                    });
            }

            if (@Model.UseCards.ToString().ToLower()) {
                const cardTrigger = document.querySelector('#pills-tab li:last-child button');
                new bootstrap.Tab(cardTrigger).show();
            }
        });
    </script>
}