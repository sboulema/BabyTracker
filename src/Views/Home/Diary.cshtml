@using BabyTracker.Models.Database;
@using System.Text.Json;

@model BabyTracker.Models.ViewModels.DiaryViewModel

@{
    ViewData["Title"] = "Diary - BabyTracker";
}

@await Html.PartialAsync("_Notification")

@if (Model == null)
{
    <div class="card col-6 offset-3">
        <div class="card-body">
            <h5 class="card-title">Please choose a date to view your entries</h5>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <div class="input-group mb-3" style="width: fit-content;">
                <a class="btn btn-outline-secondary @(string.IsNullOrEmpty(Model.DatePreviousUrl) ? "disabled" : string.Empty)" href="@Model.DatePreviousUrl"><i class="fas fa-angle-left"></i></a>
                <input type="text" id="datePickr" onchange="filterDate(event)" value="@Model?.Date.ToString("yyyy-MM-dd")" class="form-control">
                <a class="btn btn-outline-secondary @(string.IsNullOrEmpty(Model!.DateNextUrl) ? "disabled" : string.Empty)" href="@Model.DateNextUrl"><i class="fas fa-angle-right"></i></a>
            </div>
        </div>
        <div class="col">
            <div class="input-group mb-3 float-end" style="width: fit-content;">
                <input type="text" class="form-control" id="search-input" placeholder="Search">
                <button class="btn btn-outline-secondary" type="button" id="search-button"><i class="fas fa-search"></i></button>
            </div>
        </div>
    </div>

    @if (Model.Entries.Any()) 
    {
        <div class="btn-group-toggle mb-3" data-toggle="buttons">
            @foreach (var entryType in Model.EntryTypes)
            {
                <label class="btn btn-outline-info active mb-2" title="@entryType">
                    <input type="checkbox" class="btn-check entryTypeCheckbox" data-entrytype="@entryType" onchange="filterType(event)" checked autocomplete="off">
                    <img src="~/img/icon_review_@(entryType.ToLower()).png" width="32" style="filter: brightness(0) invert(1);" />
                </label>
            }
        </div>

        <div class="btn-group mb-3">
            <input type="radio" class="btn-check" name="viewStyle" id="viewStyleList" onchange="toggleViewStyle()" autocomplete="off" checked>
            <label class="btn btn-outline-primary" for="viewStyleList"><i class="fas fa-list"></i> List</label>

            <input type="radio" class="btn-check" name="viewStyle" id="viewStyleCard" onchange="toggleViewStyle()" autocomplete="off">
            <label class="btn btn-outline-primary" for="viewStyleCard"><i class="fas fa-image"></i> Card</label>
        </div>

        <table id="diaryTable" class="table fs-@Model.FontSize">
            <tbody>
                @foreach (var entry in Model.Entries.ToList())
                {
                    @await Html.PartialAsync("_DiaryEntry", entry)
                }
            </tbody>
        </table>

        <script>
            var tf;

            (function () {
                var filtersConfig = {
                    col_0: 'none',
                    col_1: 'checklist',
                    col_2: 'none',
                    col_3: 'none',
                    col_4: 'none',
                    toolbar: false,
                    themes: [{
                        name: 'transparent'
                    }],
                    extensions: [{
                        name: 'colsVisibility',
                        at_start: [0, 1, 4]
                    }]
                };

                tf = new TableFilter('diaryTable', 0, filtersConfig);
                tf.init();

                var filter = JSON.parse(localStorage.getItem("entryTypeFilter"));
                Array
                    .from(document.getElementsByClassName("entryTypeCheckbox"))
                    .forEach(element => {
                        if (!filter.includes(element.dataset.entrytype)) {
                            setTimeout(function() { element.click(); document.activeElement.blur(); }, 300);
                        }
                    });
            })();

            function filterType(event) {
                var filter = Array.from(document.getElementsByClassName("entryTypeCheckbox"))
                    .filter(c => c.checked == true)
                    .map(c => c.dataset.entrytype)

                tf.setFilterValue(1, filter);
                tf.filter();

                if (event.target.checked == true) {
                    event.target.nextElementSibling.style.filter = "brightness(0) invert(1)";
                } else {
                    event.target.nextElementSibling.style.filter = "none";
                }

                localStorage.setItem("entryTypeFilter", JSON.stringify(filter));
            }

            function toggleViewStyle() {
                var tfColsVisibility = tf.extension('colsVisibility');
                tfColsVisibility.toggleCol(2);
                tfColsVisibility.toggleCol(3);
                tfColsVisibility.toggleCol(4);
            }

            function saveCard(selector) {
                $(".btn-screenshot").toggle();

                var scrollTop = document.documentElement.scrollTop;

                window.scrollTo(0, 0);

                html2canvas(document.querySelector("#" + selector)).then(canvas => {
                    canvas.toBlob(function (blob) {
                        saveAs(blob, selector + ".png");
                    });
                });

                window.scrollTo(0, scrollTop);

                $(".btn-screenshot").toggle();
            }
        </script>
    }
    else 
    {
        <div class="card col-12 col-lg-6 offset-lg-3">
            <div class="card-body">
                <h5 class="card-title">No entries for this date</h5>
            </div>
        </div>
    }
}

@section Stylesheets
{
    <link rel="stylesheet" href="/css/tablefilter.css">
    <link rel="stylesheet" href="/css/colsVisibility.css">
    <link rel="stylesheet" href="/css/transparent.css">
    <link rel="stylesheet" href="/css/flatpickr.min.css">
}

@section HeaderScripts {
    <script src="/js/tablefilter.js"></script>
    <script src="/js/tf-1-2aa33b10e0e549020c12.js"></script>
    <script src="/js/flatpickr.min.js"></script>
}

@section Scripts {
    <script>
        var babyName = '@Html.Raw(Model!.BabyName)';

        var availableDates = @Html.Raw(JsonSerializer.Serialize(Model.AvailableDates));

        function filterDate(event) {
            window.location.href = "/" + babyName + "/" + event.target.value;
        }

        $(document).ready(function () {
            $("#datePickr").flatpickr({
                enable: availableDates,
                defaultDate: $("#datePickr").text(),
                allowInput: true
            });

            document
                .getElementById("search-button")
                .addEventListener("click", function()
                {
                    const url = new URL(window.location.href);
                    url.searchParams.set("q", document.getElementById('search-input').value);
                    window.location.href = url.href;
                });

            document
                .getElementById("search-input")
                .addEventListener("keypress", function (event) {
                    if (event.key === "Enter") {
                        event.preventDefault();
                        document.getElementById("search-button").click();
                    }
                });
        });
    </script>
}